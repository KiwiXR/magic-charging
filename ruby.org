#+title: Notes for Ruby
#+author: Mingjia Li
* Learning Ruby
:PROPERTIES:
:header-args: :results output :exports both
:END:

PS: =:exports both= cascade apply does not work for github, so we have to manually do it.

** Positional vs Keyword Arguments


Positional Arguments seems much alike Keyword Arguments, but they are DIFFERENT!
While we can use call methods like =foo(a=1)= or =foo(a:1)=, the previous actually *defines a LOCAL variable and returns the value of this assignment expression*, the latter is actually doing the expected thing. Also, as indicated by its name, Positional Arguments are only matched by their positions (but can be flexible when skipping arguments with default values, i.e., the required argument has higher priority if less values than arguments are passed in).

*** Positional Arguments vs Keyword Arguments: they can be alike:

#+BEGIN_SRC ruby :exports both
  def foo(a, b=1)
    p "a=#{a}, b=#{b}"
  end

  foo(2)

  def bar(a:, b:1)
    p "a=#{a}, b=#{b}"
  end

  bar(a:2)
#+END_SRC

#+RESULTS:
: "a=2, b=1"
: "a=2, b=1"

*** Positional Arguments can take "named" arguments, but they are not real names

#+BEGIN_SRC ruby :exports both
  def foo(a=1)
    p "a=#{a}"
  end

  foo(a=2)
  foo(x=2)
  foo(wtf=2)
#+END_SRC

#+RESULTS:
: "a=2"
: "a=2"
: "a=2"

We can see that the argument is passed in without respect to the "name".

*** The Positional Arguments group without default values have higher priorities

#+BEGIN_SRC ruby :exports both
  def foo(a=1, b)
    p "a=#{a}, b=#{b}"
  end

  # In this case, b takes the argument value
  foo(2)
  # While in this case, the values are accepted sequentially
  foo(2, 1)
#+END_SRC

#+RESULTS:
: "a=1, b=2"
: "a=2, b=1"

** Accessor

*** Define with Methods

The accessor of a class instance can be defined by a pair of methods:

#+BEGIN_SRC ruby :exports both
  class C
    def name
      @name
    end

    def name=(val)
      @name = val
    end
  end

  c = C.new
  p c.name
  c.name = 'kiwi'
  p c.name
#+END_SRC

#+RESULTS:
: nil
: "kiwi"

*** Define with Symbols

The accessor

#+BEGIN_SRC ruby :exports both
  class C
    attr_accessor :name
    attr_reader :reader
    attr_writer :writer

    def greet
      p "Hi, call me #{name}"
      p "Hi, also call me with #{self.name}"
      p "Hi, still callable with #{@name}"
    end

    def assign(val)
      name = val
      p "Call me #{self.name}?"
      self.name = val
      p "Call me #{self.name}!"
    end
  end

  c = C.new
  p c.name
  c.name = "test"
  p c.name
  c.assign('kiwi')
  c.greet
#+END_SRC

#+RESULTS:
: nil
: "test"
: "Call me test?"
: "Call me kiwi!"
: "Hi, call me kiwi"
: "Hi, also call me with kiwi"
: "Hi, still callable with kiwi"

** Singleton Class/Method

Singleton Class is the class that binds to every single *Object*, NOTE that each CLASS is also an *Object*!

*** Class is Object

#+BEGIN_SRC ruby :exports both
  class Foo; end

  p Foo.class
  p Foo.is_a?(Object)
#+END_SRC

#+RESULTS:
: Class
: true

*** Singleton Class Comes with Each Object

#+BEGIN_SRC ruby :exports both
  class Foo; end

  p Foo.singleton_class

  p String.singleton_class

  p Foo.new.singleton_class

  p String.new.singleton_class
#+END_SRC

#+RESULTS:
: #<Class:Foo>
: #<Class:String>
: #<Class:#<Foo:0x0000018f40af2898>>
: #<Class:#<String:0x0000018f40af2708>>

*** A =class <<= Syntax Opens Up the Singleton Class of an Object

[[https://stackoverflow.com/a/6852104][source]]
#+BEGIN_QUOTE
the =class << self= (or any object in place of self) construct is truly different. It is really a builtin feature of the language itself, in CRuby it's defined in parse.y as

=k_class tLSHFT expr=

=k_class= is the 'class' keyword, where =tLSHFT= is a '<<' token and expr is an arbitrary expression. That is, you can actually write

=class << <any expression>=

and will get shifted into the singleton class of the result of the expression.
#+END_QUOTE



#+BEGIN_SRC ruby :exports both
  class Foo
    class << self
      def hi; "hi" end
    end
  end

  p Foo.class
  p Foo.singleton_class
  p Foo.singleton_methods(false)
  p Foo.methods(false)

  foo = Foo.new

  class << foo
    def me; "me" end
  end

  p foo.class
  p foo.singleton_class
  p foo.singleton_methods(false)
  p foo.methods(false)
#+END_SRC

#+RESULTS:
: Class
: #<Class:Foo>
: [:hi]
: [:hi]
: Foo
: #<Class:#<Foo:0x0000028979d71c98>>
: [:me]
: [:me]

*** Alternatively, Singleton Methods can also be defined in "class method" style or so

#+BEGIN_SRC ruby :exports both
  class Foo; end

  class << Foo
    def hi1; "hi1" end
  end

  class Foo
    def self.hi2
      "hi2"
    end
  end

  class Foo
    def Foo.hi3
      "hi3"
    end
  end

  def Foo.hi4; "hi4" end

  p Foo.hi1
  p Foo.hi2
  p Foo.hi3
  p Foo.hi4
#+END_SRC

#+RESULTS:
: "hi1"
: "hi2"
: "hi3"
: "hi4"

** Class Variable vs Instance Variable on Class

[[https://www.ruby-lang.org/en/documentation/faq/8/][ref1]]

[[https://stackoverflow.com/a/15773671][ref2]]

Class Variable is shared through inheritance, while Instance Variable on class is independent

Instance Variable on class (Class Instance Variable) is actually a variable in the class object, which is the /instance variable/ of its superclass. Therefore, an =attr_accessor= of its *singleton class can be used to simplify its external access.

#+BEGIN_SRC ruby :exports both
  class Foo
    @count = 0

    class << self
      attr_accessor :count
    end

    def self.count
      @count
    end

    def count
      self.class.count
    end
  end

  class Bar < Foo
    attr_accessor :count
  end

  Foo.count += 1  # self.singleton_class.count=
  p Foo.count  # self.count
  p Foo.new.count  # count

  p Bar.count
  p Bar.new.count

  puts "inherited instance"

  bar = Bar.new
  bar.count = 100
  p Foo.count
  p Bar.count
  p Bar.new.count
  p bar.count

  puts "inherited class"

  Bar.count = 200
  p Foo.count
  p Bar.count
  p Bar.new.count
  p bar.count
#+END_SRC

#+RESULTS:
#+begin_example
1
1
nil
nil
inherited instance
1
nil
nil
100
inherited class
1
200
nil
100
#+end_example

For Class Variables, the changes are shared among class inheritance

#+BEGIN_SRC ruby :exports both
  class Foo
    @@count = 1

    def self.count
      @@count
    end

    def self.count=(val)
      @@count = val
    end

    def count
      @@count
    end

  end

  class Bar < Foo
    def count
      @@count
    end

    def count=(val)
      @@count = val
    end
  end

  p Foo.count
  p Bar.count
  p Foo.new.count
  p Bar.new.count

  puts "class level change"

  Foo.count += 1
  p Foo.count
  p Bar.count
  p Foo.new.count
  p Bar.new.count

  puts "instance level change"

  Bar.new.count += 1
  p Foo.count
  p Bar.count
  p Foo.new.count
  p Bar.new.count
#+END_SRC

#+RESULTS:
#+begin_example
1
1
1
1
class level change
2
2
2
2
instance level change
3
3
3
3
#+end_example
